<pre class='metadata'>
Title: Cookie Change Events
Shortname: cookie-change-events
Level: 1
Group: wicg
Status: ED
URL: https://patrickkettner.github.io/cookie-change-events
Editor: Patrick Kettner, Microsoft, patket@microsoft.com
Abstract: This specification describes an API that can be used to attach events to cookie changes via javascript
Repository: patrickkettner/cookie-change-events
</pre>

<section class="non-normative">
  <h2 id="introduction">Introduction</h2>
  <em>This section is non-normative.</em>
  <p>
    Web Applications have conventionally had to poll document.cookie in order to
    know when a cookie has been modified or removed. In order to improve performance
    and reduce the use of unnecessary timers, this specification describes an API
    that allows for web developers to attach an event listener to `document.cookie`,
    and receive the relevant information about a cookie change via a callback.
  </p>

</section>

<section>
  <h2 id="definitions">Definitions</h2>
  <section>
    <pre class="idl">
      dictionary CookieInit {
          attribute USVString name;
          attribute DOMString expires;
          attribute long long max-age
          attribute USVString domain;
          attribute USVString path;
          attribute boolean secure;
          required USVString value;
      };
    </pre>
    <p>
      A {{CookieInit}} is a generic object that can be used to define a new cookie.
      You can set the following fields:
      <ul>
        <li><dfn for='CookieInit' enum-value>name</dfn> is the key value in the
        key value pairing for cookies. Because of backwards compatibility, it
        is not required.</li>
        <li><dfn for='CookieInit' enum-value>expires</dfn> is an optional string
        value of a [RFC 1123 Date](https://tools.ietf.org/html/rfc1123), pursuant to [RFC 6265§4.1.1](https://tools.ietf.org/html/rfc6265#section-4.1.1)</li>
        <li><dfn for='CookieInit' enum-value>max-age</dfn> is an optional numeric
        value that, when specified, defines the number of seconds until the cookie
        expires, starting when the value is set, pursuant to [RFC 6265§5.2.2](https://tools.ietf.org/html/rfc6265#section-5.2.2)</li>
        <li><dfn for='CookieInit' enum-value>domain</dfn> is an optional attribute
        that specifies what domain the cookie will be sent to, pursuant to
        [RFC 6265§5.2.3](https://tools.ietf.org/html/rfc6265#section-5.2.3).</li>
        <li><dfn for='CookieInit' enum-value>path</dfn> is an optional attribute
        that will only give access to the cookie if the requested resource matches
        the specified path, pursuant to [RFC 6265§5.2.4](https://tools.ietf.org/html/rfc6265#section-5.2.4).</li>
        <li><dfn for='CookieInit' enum-value>secure</dfn> is an optional boolean
        attribute that, when true, signals that the cookie can only be transmitted
        over "secure" protocols, as defined by the user agent. pursuant to
        [RFC 6265§5.4](https://tools.ietf.org/html/rfc6265#section-5.4), subsection 1</li>
        <li><dfn for='CookieInit' enum-value>value</dfn> is the only required
        attribute. It is a string, as defined as a cookie-value in [RFC 6265](https://tools.ietf.org/html/rfc6265)</li>
      </ul>
    </p>
  </section>

  <section>
    <pre class="idl">
      [Exposed=Window]
      [Constructor(CookieInit cookieInitDict)]
      interface Cookie : EventTarget {
          readonly attribute USVString name;
          attribute DOMString expires;
          attribute USVString value;
          readonly attribute USVString domain;
          readonly attribute USVString path;
          readonly attribute boolean secure;
          readonly attribute boolean session;
          stringifier USVString;
          setter USVString (Cookie or USVString);
      };
      </pre>
      <p>
        For backwards compatibility, the <dfn for='Cookie' enum-value>stringifier</dfn>
        for a {{Cookie}} returns the serialized version of the object in a format
        that is consistent with how a cookie is returned on the original document.cookie.
        The Cookie can be set via a {{CookieInit}} object, or via the same serialized string.
      </p>
    </section>

    <section>
      <pre class="idl">
      [Exposed=Window]
      interface CookieJar{
          stringifier attribute USVString value;
          maplike<USVString, Cookie>;
      };

      partial interface Document {
          [PutForwards=value] attribute CookieJar cookie;
      };
    </pre>
    <p>For backwards compatibility, a {{CookieJar}}, when implemented as document.cookie,
      returns the serialized string version of a {{Cookie}}. However, a iterator
      is also defined, which returns the object form of {{Cookie}} on each iteration.
      <pre class="lang-js">
        let cookie = document.cookie
        typeof cookie // returns true

        for (let cookie of document.cookie) {
          if (cookie.name === 'cookieIWantToDelete') {
            cookie.delete()
          }
        }
      </pre>
  </section>
  <section>
    <h2 id="the-change-event">the Change event</h2>
    <section>
      <pre class="idl">
        enum ChangeCause {
          "explicit",
          "evicted",
          "expired",
          "expired-overwrite",
          "overwrite",
          "created"
        };
      </pre>
      <p>
        A {{ChangeCause}} is a string that represents the reason the cookie change
        event has been fired.
        <ul>
          <li><dfn for='ChangeCause' enum-value>explicit</dfn> is to be used when
          a cookie's .delete() function is called.</li>
          <li><dfn for='ChangeCause' enum-value>evicted</dfn> is to be used when
          when a cookie has been automatically removed due to garbage collection.</li>
          <li><dfn for='ChangeCause' enum-value>expired</dfn> is to be used when
          when a cookie's max-age value expires, or when the expires value is in the past.</li>
          <li><dfn for='ChangeCause' enum-value>expired-overwrite</dfn> is to be used when
          when a cookie's max-age value is set to 0, or when the expires value
          is overwritten with a value in the past</li>
          <li><dfn for='ChangeCause' enum-value>overwrite</dfn> is to be used when
          when a cookie's value is overwritten.</li>
          <li><dfn for='ChangeCause' enum-value>created</dfn> is to be used when
          when a cookie is created.</li>
        </ul>
      </p>
    </section>

    <section>
      <pre class="idl">
        interface CookieChangeEvent : Event {
          readonly attribute boolean removed;
          readonly attribute ChangeCause cause;
          readonly attribute Cookie cookie;
        };
      </pre>
      <p>
        A {{CookieChangeEvent}} is an event that is fired when a {{ChangeCause}}
        has been triggered.
        <ul>
          <li><dfn for='CookieChangeEvent' enum-value>removed</dfn> is a boolean
            that represents whether or not a cookie has been removed from the {{CookieJar}}</li>
          <li><dfn for='CookieChangeEvent' enum-value>cause</dfn> is a valid {{ChangeCause}},
          representing why a cookie the cookie in question has been modified.</li>
          <li><dfn for='CookieChangeEvent' enum-value>cookie</dfn> is a valid {{Cookie}}, that
            represents the cookie that has been modified.</li>
        </ul>
      </p>
    </section>
  </section>
